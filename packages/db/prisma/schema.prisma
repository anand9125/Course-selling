generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
 
}

model User {
  id               String         @id @default(cuid())
  name             String
  email            String         @unique
  password         String
  isInCollege      Boolean
  college          String?
  branch           String?
  year             Int?
  walletBalance    Float          @default(0.0)
  referralCode     String         @unique @default(uuid())
  referredById     String?
  profileCompleted Boolean        @default(false)
  role             Role           @default(STUDENT)
  purchases        Purchase[]
  reviews          Review[]
  referredBy       User?          @relation("UserReferrals", fields: [referredById], references: [id])
  referrals        User[]         @relation("UserReferrals")
  userCategories   UserCategory[]
}

model UserCategory {
  id         String   @id @default(cuid())
  userId     String
  categoryId String
  category   Category @relation(fields: [categoryId], references: [id])
  user       User     @relation(fields: [userId], references: [id])
}

model Category {
  id             String         @id @default(cuid())
  name           String
  categoryId     String         @unique
  index          Int            @default(0)
  image          String
  courses        Course[]
  mentors        Mentor[]
  userCategories UserCategory[]
}

model Mentor {
  id         String   @id @default(cuid())
  name       String
  categoryId String
  rating     Float    @default(0.0)
  image      String
  mentorId   String   @unique
  index      Int      @default(0)
  courses    Course[]
  category   Category @relation(fields: [categoryId], references: [id])
}

model Course {
  id          String     @id @default(cuid())
  courseId    String     @unique
  title       String
  description String
  price       Float
  mentorId    String
  image       String
  CourseLink  String ?
  categoryId  String
  actualPrice Float
  index       Int
  category    Category   @relation(fields: [categoryId], references: [id])
  mentor      Mentor     @relation(fields: [mentorId], references: [id])
  purchases   Purchase[]
  reviews     Review[]
}




model Purchase {
  id               String   @id @default(cuid())
  userId           String
  courseId         String
  amount           Float
merchantOrderId    String   @unique
  status           Status  
  purchasedAt      DateTime @default(now())
  course           Course   @relation(fields: [courseId], references: [id])
  user             User     @relation(fields: [userId], references: [id])
}

model Review {
  id        String   @id @default(cuid())
  userId    String
  courseId  String
  rating    Int      @default(5)
  comment   String?
  createdAt DateTime @default(now())
  course    Course   @relation(fields: [courseId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model AdminSettings {
  id               String   @id @default(uuid())
  selectedMentorId String?  @unique
  updatedAt        DateTime @updatedAt
}

enum Role {
  STUDENT
  ADMIN
}
enum Status{
  PENDING
  COMPLETED
  CANCELLED
  FAILED
}

 
