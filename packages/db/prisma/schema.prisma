generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
 
}

model User {
  id               String         @id @default(cuid())
  name             String
  email            String         @unique
  password         String
  isInCollege      Boolean
  college          String?
  branch           String?
  year             Int?
  walletBalance    Float          @default(0.0)
  referralCode     String         @unique @default(uuid())
  referredById     String?        //Each user can have one referrer (referredById)
  profileCompleted Boolean        @default(false)
  role             Role           @default(STUDENT)
  purchases        Purchase[]
  referredBy       User?          @relation("UserReferrals", fields: [referredById], references: [id])  //self-referential referral system,(each user can refer other users and also be referred by another user.)
  referrals        User[]         @relation("UserReferrals")   //Each user can refer multiple users (referrals).

}



model Category {
  id             String         @id @default(cuid())
  name           String
  categoryId     String         @unique
  index          Int            @default(0)
  image          String
  courses        Course[]
  mentors        Mentor[]

}

model Mentor {
  id         String   @id @default(cuid())
  name       String
  categoryId String
  rating     Float    @default(0.0)
  image      String
  mentorId   String   @unique
  index      Int      @default(0)
  courses    Course[]
  category   Category @relation(fields: [categoryId], references: [id])
}

model Course {
  id          String     @id @default(cuid())
  courseId    String     @unique
  title       String
  description String
  price       Float
  mentorId    String
  image       String
  CourseLink  String?
  categoryId  String
  actualPrice Float
  index       Int
  category    Category   @relation(fields: [categoryId], references: [id])
  mentor      Mentor     @relation(fields: [mentorId], references: [id])
  purchases   PurchaseCourse[]  // Many-to-many relation with purchases

}

model Purchase {
  id               String   @id @default(cuid())
  userId           String
  amount           Float
  merchantOrderId  String   @unique
  status           Status  
  purchasedAt      DateTime @default(now())
  user             User     @relation(fields: [userId], references: [id])
  courses          PurchaseCourse[] // Many-to-many relation with courses
}

model PurchaseCourse {  // Junction table to link purchases and courses to make many to many realtion
  purchaseId String
  courseId   String
  purchase   Purchase @relation(fields: [purchaseId], references: [id], onDelete: Cascade)
  course     Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  @@id([purchaseId, courseId]) // Composite primary key   ensures each course is only linked once per purchase.
}




model AdminSettings {
  id               String   @id @default(uuid())
  selectedMentorId String?  @unique
  updatedAt        DateTime @updatedAt
}

enum Role {
  STUDENT
  ADMIN
}
enum Status{
  PENDING
  COMPLETED
  CANCELLED
  FAILED
}

model TelegramAccessToken {
  id          String   @id @default(cuid())
  token       String   @unique
  email       String
  telegramLink String
  createdAt   DateTime @default(now())
}
model Forgetpassword {
  id          String   @id @default(cuid())
  token       String   @unique
  email       String
  createdAt   DateTime @default(now())
}


 
//UserReferrals relation is a self-referential relation that links users together.